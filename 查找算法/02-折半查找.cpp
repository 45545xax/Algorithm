

// 02-折半查找 也称二分查找算法、二分搜索 
/*
折半搜索，也称二分查找算法、二分搜索，是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，
    则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。
    如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。

信息论的角度解释：每次对比产生3种结果：相等，大于，等于。
    0-相等时就找到要的结果了。
    1-大于或者小于时，没有找到要的结果。但是当对 信息利用最大化时，2个选择就可以使搜索范围缩小一半。
    2-如果对比能产生更多结果，那每次对比就可能 使搜索范围 减小到原来的 1/n 

    所以 二分查找算法就可以每次把搜索范围缩小一半。
*/


// __________________________0 基础函数 __________________________
// 


// __________________________1  __________________________
/*

*/


int binsearch(int goal,int array[],int length) 
{

}   




/*  复杂度分析：
 时间复杂度
    折半搜索每次把搜索区域减少一半，时间复杂度为O(logn)。（n代表集合中元素的个数）
 空间复杂度
    O(1)。虽以递归形式定义，但是尾递归，可改写为循环。
    
*/