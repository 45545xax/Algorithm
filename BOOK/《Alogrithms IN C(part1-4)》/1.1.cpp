

// 第一部分 基础知识


// __________________________ 1.1 算法 __________________________
/*
	当我们利用计算机帮助我们求解问题时，一般都会面对许多不同的方法。对于小规模的问题，利用哪一个方法是不重要的，只要能够有个方法正确解决问题就行。
	然后对于大规模问题(或需要求解大量小规模的问题的应用)，我们的动机就是设计时间和空间都尽可能高效的方法。

	我们学习算法设计的主要原因是这个学科可以使我们节省大量的时间和空间，甚至可能使原本不可能解决的问题得以解决。


	选择某个特定任务的 最好算法 可能是一个复杂的过程，也许涉及复杂的数学分析。
	计算机科学中研究这些问题的分支称为算法分析（ analysis of  algorithm ）。
*/

// __________________________ 1.2 典型问题————连通性 __________________________

/*
	如何排列才能快速断定网络中的任何给定两点是连通的？

	还有一个例子出现在某种程序设计环境中，连通性 可用来断言两个变量名是否等价。

扩展：
	比如我们的连通问题的说明只要求我们的程序知道任意给定对 p-q 是否连通的，并不
	能够表明连接那个对的任何方式。
	添加这样一个说明的要求会使问题更加困难，会涉及其他的算法。

查找：包含给定数据项的集合
用它们的并集 替换包含 两个给定数据项 的集合。

根据查找和合并抽象操作容易求解连通性问题。
在从输入读取一个新的对 p-q 后，对于对中的每个数执行查找操作。如果对的成员在同一集合中，那么考虑下一对。

如果它们不在同一集合中，则执行合并工作，并输出这个对。

集合表示连通分量，即那些给定分量中的任何两个对象 是连通对象的集合。

这种方法把 开发连通问题算法解的过程变为定义表示集合的数据结构以及开发高效利用这个数据结构的查找和合并算法。

*/


// __________________________ 1.3 合并 - 查找算法 __________________________

/*
	01 开发求解给定问题高效算法的过程的第一步是实现解这个问题的一个简单算法。

	我们总是关注算法的效率，但我们在开发解决的问题的第一个程序时更关注的是确保程序的正确性。
*/


// 程序1.1 连通问题的快速查找算法
// P5






